参看书籍:
<linux设备驱动程序>　第6章
<linux设备驱动发——基于最新的linux 4.0内核＞　 第8章
<深入理解linux内核>　第13章
主要内容：
1.SPI协议介绍
    简述：串行，全双工（如果同一时间可以双向同是发送数据，就是全双工），同步，主从，无应答，不需要寻址，位传输,没有流控制
    接口：
        SDO/MOSI – 主设备输出，从设备输入    SDI/MISO – 主设备输入，从设备输出
		SCLK – 时钟信号，由主设备产生;       CS/SS – 从设备使能信号，由主设备控制。
	数据交换：
		CS/SS电平由高变低，则产生起始信号；CS/SS电平由低变高，则产生停止信号。从机检测到自己的CS/SS线电平被置低，则开始与主机进行通讯。如果没有CS 信号，则只能存在一个从设备。主设备通过产生移位时钟来发起通讯。SCK开始运行，通讯开始，数据在时钟的上升或下降沿(触发)时，MOSI线通过移位寄存器 把发送缓冲区的数据逐位传输，在紧接着的下降或上升沿(采样)，MISO则把数据一位一位存进接收缓冲区这样经过8/16 次时钟的改变，完成8/16 位数据的传输。当发送缓冲区为空时，开始下一次交换。
	通讯模式：
		Mode0：CPOL=0，CPHA=0			Mode1：CPOL=0，CPHA=1
		Mode2：CPOL=1，CPHA=0			Mode3：CPOL=1，CPHA=1
		其中时钟极性CPOL是用来配置SCLK的电平出于哪种状态时是空闲态或者有效态，时钟相位CPHA是用来配置数据采样是在第几个边沿：
			CPOL=0，表示当SCLK=0时处于空闲态，所以有效状态就是SCLK处于高电平时
		    CPOL=1，表示当SCLK=1时处于空闲态，所以有效状态就是SCLK处于低电平时
			CPHA=0，表示数据采样是在第1个边沿，数据发送在第2个边沿
			CPHA=1，表示数据采样是在第2个边沿，数据发送在第1个边沿
            
2.SPI子系统模型
    SPI核心：SPI控制器驱动和设备驱动之间的纽带，它提供了SPI控制器驱动和设备驱动的注册、注销方法等。
    SPI控制器驱动(主机)：对SPI控制器驱动的实现．产生总线的各种波形
    SPI设备驱动(从机)：对SPI从设备的驱动实现，如spi flash
    板级逻辑：主级与从机之间的互联关系

３.SPI代码分析
    核心层(linux-2.6.39/drivers/spi/spi.c和spi-binbang.c)
        常用数据结构:
            spi_bus_type：定义的spi总线类型
            spi_master:是对某一条SPI总线的抽象，是特定总线的相关属性的集合。
            spi_driver:Driver是为device服务的，SPI_driver注册时会扫描SPI bus上的设备，进行驱动和设备的绑定。
            spi_device:spi_device对应着SPI总线上某个特定的slave。每个slave都有特定的大小端、速率及传输位宽，各个slave相互之间无干扰。
            spi_board_info：spi 的板级信息的描述
            spi_transfer：
            spi_message：
            spi_bitbang(binbang GPIO模拟spi)：
        常用接口:
            spi_init()：总线注册以及核心层的初始化
            spi_match_device()：总线的匹配函数
            spi_alloc_master()：分配一个spi master
            spi_register_master()/spi_unregister_master():分配一个spi master
            spi_register_board_info():注册一个主机或从机设备的硬件信息
            spi_register_driver()：注册spi driver 
            
            spi_message_init()/spi_message_add_tail()
            spi_sync()/spi_async()
            spi_read()/spi_write()
            
    主机设备侧程序(tq2440中没有添加spi的资源，参考linux-2.6.39/arch/arm/mach-at91/at91sam9260_devices.c)
        定义开发板spi的资源文件:提供寄存器范围，spi中断
        定义platform_device设备，指定设备的姓名，资源等硬件信息
        注册platform_device
        通过调用spi_register_board_info将SPI board info注册进系统SPI设备列表中(at91_add_device_spi(模块注册函数))
    主机驱动侧程序(linux-2.6.39/drivers/spi/spi_s3c24xx.c)：
        定义platform_driver的驱动
        将驱动注册为平台总线驱动模型，直接跳到probe函数
        分配SPI主机：spi_alloc_master
        获得设备的资源并设置master
        获取 spi 时钟，并且使能
        硬件初始化：s3c24xx_spi_initialsetup
        注册SPI主机：spi_register_master(在spi_bitbang_start中调用)
        实现SPI master的setup及cleanup，SPI bitbang的setup_transfer，chipselect，txrx_bufs方法
    从机设备侧程序(??)   
        分配一个 spi_board_info 结构体
        设置 spi_board_info 里的名字、最大频率、控制器编号、模式、片选
        注册 spi_register_board_info 
        spi_new_device
        spi_add_device
        device_add

        spi_device


    从机驱动侧程序(linux-2.6.39/drivers/mtd/devices/m25p80.c（spi flash）) ：   
        定义一个 spi_driver 结构，并设置名字、probe等函数
        注册 spi_register_driver，将bus设置为spi
        配置并注册为一个ＭTD子系统(不同的外设可能不一样)
        实现spi_write等系统调用，通过spi_transfer spi_message数据结构完成数据收发 
