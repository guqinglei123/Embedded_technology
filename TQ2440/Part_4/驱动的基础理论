参考书籍：


一：内核模块的配置：

    主要内容：
    1.内核模块的简述
        １）.将模块全部编译进内核中导致的问题：内核将变的特别庞大。且不方便增删。
        ２）.模块特点：模块本身并不被编译进内核文件（zImage或bzImage）,可以根据需求，在内核运行期间动态的安装或卸载。同时，模块一旦被加载就和内核没有什么区别。
    ２．模块的结构
        1）模块加载函数，以__init标记声明（作用），通过module_init()函数指定。加载别的模块request_module来实现
        2）模块卸载函数，以__exit标记声明，通过module_exit()函数指定
        3）模块参数。通过module_param（ 参数名， 参数类型， 参数读/写权限） ”为模块定义一个参数
        4）导出符号。导出的符号可以被其他模块使用。使用EXPORT_SYMBOL(符号名）；EXPORT_　SYMBOL_GPL　(符号名)导出
        5）模块信息。使用MODULE_AUTHOR、 MODULE_DESCRIPTION、MODULE_VERSION、 MODULE_DEVICE_TABLE、 MODULE_ALIAS分别声明模块的作者、 描述、 版本、 设备表和别名
        ６)模块记数。通过MOD_INC_USE_COUNT、 MOD_DEC_USE_COUNT宏来管理自己被使用的计数
        备注：绕开ＧＰＬ
    ３．模块使用
        １）编译  makefile文件的书写
        ２）安装　insmod/modprobe(后者可以加载依赖，模块之间关系在/lib/modules/内核版本/modules.dep中)
        ３）卸载　rmmod
        ４）查看　lsmod（读取/proc/modules目录或者/sys/modules）
        5）信息 modinfo
        
    主要实验：

        helloword模块
    注意：１.屏幕中不出现helloword通过　/var/log/kern.log或者切换到tty１～６而不是虚拟控制终端，并且修改sudo echo　８　> /proc/sys/kernel/printf 

二：内核链表：

    主要内容:
    1.链表的分类：单向list、双向list、双向循环list(内核list为双向循环list)。
    2.内核list的特殊之处（即如何实现使用一个list_head实现对不同类型节点的链接）：
    3.创建和操作内核list的函数
    4.分析内核中与内核list相关的函数的具体实现(宏定义offsetof container_of)


三：系统调用：

    主要内容：
        系统调用与API的异同
        
    实验过程：
        1.在模块中定义系统调用函数
            1）修改定义系统调用编号是文件unistd.h（arch\arm\include\asm\unistd.h）
            2) 在calls.s（\arch\arm\kernel\calls.S）中模块中系统调用函数
            3）实现模块中系统调用函数
        2.在用户程序中使用系统调用函数
            1）将系统调用编号放在r7。（这里使用ldr而不是mov，是因为363长度超过了8位）
            2）通过swi通过软中断切换到内核态
            3）当系统切换到内核态时，通过寄存器得到系统调用编号，并且通过sys_call_table(定义在\arch\arm\....entry-common.S)去访问该编号对应的模块实现函数。调用sys_call_table其实就是在calls.s该编号对应的模块实现函数。
四：驱动开发概述：

    主要内容：
    1.了解驱动系统与文件系统的接口——devfs/udev
    2.了解驱动的基本分类——字符设备，块设备，网络设备
    3.驱动的框架，编译与安装——与模块基本一致。驱动基本结构是将裸机开发的程序填充在模块的基本框架中。
    4.如何编写应用程序测试驱动。了解静态链接与动态链接的区别，注意开发板中应用程序中要使用静态编译，因为开发板中没有相应的库。





五：驱动模型概述：

    主要内容：
    驱动模型：
        
    设备驱动的核心化（分层）
        字符驱动模型
            misc设备(字符设备)
            终端设备(字符驱动)
            ＲＴＣ设备(字符驱动)
            输入设备(字符驱动)
            Framebuffer设备(字符驱动)
        块设备模型
            MTD驱动模型／内存设备（字符设备和块设备）
            MMC子系统／SD卡设备（字符设备）
        网络驱动模型

    总线设备驱动模型(分离)
        平台总线驱动模型
            hotplug_even机制
        主机驱动与外设驱动的分离
            SPI驱动模型
            IIC驱动模型
            USB驱动模型



    实验设计：
    主机定义的一套总线，设备，驱动
    在平台总线驱动模型下实现一个去抖的按键中断程序(阻塞型)