参看书籍:
<linux设备驱动程序>　第5，6章
<linux设备驱动开发——基于最新的linux 4.0内核＞　 第6章
<深入理解linux内核>　第13章

主要内容：
1.设备控制
2.并发与竞态
    1）.并发
        a).并发：指系统支持同时存在多个任务的行为。在并发系统中，中断、异常机制以及内核态抢占度导致了内核执行路径以交错的方式运行。对于这些交错路径执行的内核路径，对一些关键资源进行交错访问和修改。系统通过同步机制保证这些关键资源的一致性。
        b）.进程交互及导致问题：
            1).竞争(进程之间不知道对方的存在)：互斥，死锁，饥饿；
            2).共享合作（进程通过如共享对象等方式知道对方的存在）：互斥，死锁，饥饿，数据相关性；
            3).通信合作(进程通过通信方式知道对方的存在)：死锁，饥饿；
        c).内核中竞态发生的情况(并发是指多个执行单元同时，并行执行，而并发的执行单元对共享资源的访问则很容易导致竞态)
            1).对称多处理器的多个CPU
            2).单CPU的进程抢占
            3).中断对进程的影响
        d).解决竞态问题的途径是保证对共享资源的互斥访问。访问共享资源的代码区域称为临界区，临界区要互斥机制保护。


        原子性，可见性，有序性
    2）.同步与互斥
        a).概念
            1).同步，是指在不同进程之间的若干程序片断，它们的运行必须严格按照规定的 某种先后次序来运行，这种先后次序依赖于要完成的特定的任务。
            2).互斥，是指在不同进程之间的若干程序片断，当某个进程运行其中一个程序片段时，其它进程就不能运行它们之中的任一程序片段，只能等到该进程运行完这个程序片段后才可以运行。
            3).两者联系。互斥是两个线程之间不可以同时运行，他们会相互排斥，必须等待一个线程运行完毕，另一个才能运行，而同步也是不能同时运行，但他是必须要安照某种次序来运行相应的线程（也是一种互斥）！同步是一种更为复杂的互斥，而互斥是一种特殊的同步。
        b).互斥要求：
            1).
        c).互斥实现的方法：
            1）硬件支持：中断禁用，专门的机器指令()    
            2）软件方法：共享变量等方法——peterson/Dekkers算法
            3）更高级抽象方法(在操作系统中，对硬件的同步原语（中断禁用，原子操作指令(test-and-set指令,交换指令)）进行更高级的抽象)：锁，信号量(临界区的互斥访问，条件同步)，管程(hansen管程，hoare管程)，消息传递
        d).基本例子
            1）生产者-消费者问题：
                信号量的实现：
                管程的实现：
            1）哲学家就餐问题：
                信号量的实现：
            1）读者——写者问题(读者优先，写者优先)：
                信号量的实现：
                管程的实现：
        

        互斥：是指某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者对资源的访问顺序，即访问是无序的。　　

        同步：是指在互斥的基础上（大多数情况），通过其它机制实现访问者对资源的有序访问。在大多数情况下，同步已经实现了互斥，特别是所有写入资源的情况必定是互斥的。少数情况是指可以允许多个访问者同时访问资源。

    3）.死锁与饥饿
        a).概念：
            死锁：由于竞争资源或者通信关系，两个或更多线程在执行中出现，永远相互等待而造成的一种阻塞的事件
            饥饿：由于别的并发的激活的过程持久占有所需资源,使某个异步过程在可预测的时间内不能被激活。
        b).进程访问资源过程：请求/获取——>使用/占用——>释放
        c).可重用资源与消费资源：
            可重用资源：资源不能被删除且在任何时刻只能有一个进程使用；进程释放资源后，其他进程可重用。
            消耗资源：资源创建和销毁
        d).死锁的必要条件：互斥，持有并等待，非抢占，循环等待(存在得到等待集合)
        e).处理方法（与消防类似）:死锁预防；死锁避免(银行家算法);死锁检测和恢复(死锁检测算法);交给由应用进程处理。

    4）.linux并发机制：
        内核进程的同步：
            硬件支持的同步原语：Pre-CPU，中断屏蔽，内存屏障，整型原子操作，位原子操作(ldrex,strex)；
            基于锁机制：自旋锁，读写自旋锁，顺序锁；
            基于信号量机制：信号量，互斥量，读写信号量；
            其他机制：RCU，completion。            
        进程通信：信号；管道(半双工管道：pipe；命名管道：FIFO)；消息队列(System V消息队列 POSIX消息队列);信号量(System V信号量 POSIX信号量);共享内存(System V共享内存 POSIX共享内存);Socket。            
        线程同步(因为不同线程之间共享数据，所以线程通信主要是线程同步)：
            屏障
            锁机制机制：互斥量，读写锁，条件变量，自旋锁
            信号量机制(Semaphore)：无名信号量与有名信号量
            信号机制(Signal)：类似进程间的信号处理

        注意：linux下的信号量机制有：
            内核信号量：该信号量提供了用户态的实现，即System V信号量)；
            Posix信号量：包括两种，分别为通过Posix IPC名字标识的有(命)名信号量;存放在共享内存区中基于内存的无名信号量，只能使用与线程通信。


3.软件框架(没有描述的同上一节)
    1）定义相关结构体    
    2)模块加载与卸载
    3）实现文件操作结构体中基本操作
        a)open操作：
        b)release操作：
        c)read操作：
        d)write操作：
        e)llseek操作：
        f)ioctl操作：
        


首先简单解释几个概念：

并发系统：指支持同时存在多个任务的系统。

进程通讯：至少两个进程或线程间传送数据或信号的一些技术或方法。linux下支持的方式有：信号， 管道，FIFO，消息队列，信号量，共享内存，socket。

同步：是指在不同进程或线程之间的若干程序片断，它们的运行必须严格按照规定的 某种先后次序来运行，这种先后次序依赖于要完成的特定的任务。在linux内核同步的方式有：中断屏蔽，内存屏障，整型原子操作，位原子原子操作，自旋锁，读写自旋锁，顺序锁，信号量，互斥量，读写信号量，RCU，completion。

互斥：是指在不同进程或线程之间的若干程序片断，当某个进程运行其中一个程序片段时，其它进程就不能运行它们之中的任一程序片段，只能等到该进程运行完这个程序片段后才可以运行。互斥是同步机制中的一种特殊情况。

死锁：指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象。

饥饿：由于别的并发的激活的过程持久占有所需资源,使某个异步过程在可预测的时间内不能被激活。

请问这样对这几个概念进行梳理是否合适？在并发系统中，中断、异常机制以及内核态抢占度导致了内核执行路径以交错的方式运行。对于这些交错路径执行的内核路径，对一些关键资源进行交错访问和修改。系统通过同步机制保证这些关键资源的一致性。

实现同步机制的一种重要思路是对临界区资源的互斥访问，死锁和饥饿。进程通信？

实验过程：
