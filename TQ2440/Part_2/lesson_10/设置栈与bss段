参看书籍:
文档——Uboot启动流程分析（汇编）
《嵌入式LINUX开发宝典——基于ARM cortex-A8 处理器》第10章（C）
《嵌入式LINUX应用开发手册》 第6章（汇编）
https://blog.csdn.net/lvjianxin6015/article/details/55282763
主要内容：
１.栈的作用以及栈指针的生长方式
    堆栈指针（R13，sp），栈帧（R11寄存器，也就是FP）），
    满栈(SP指向最后压入堆栈数据)/空栈，升栈(入栈的位置从低到高)/降栈，ARM采用的是满栈和降栈。   
    栈的地址应该设置多少（这里设置为SDRAM的顶部为0x30000000+64M=0x34000000）)。
3.栈的作用（调用函数栈做了那些工作）
    存局部变量，传递大于4个的参数，保存寄存器的值
4.Uboot的内存发布以及bss段的作用
    Uboot的内存发布及作用：
    代码：代码段；初始化全局：数据段；未初始化的全局：BSS；初始化的局部：栈；动态分配区：堆；
    程序运行时内存分布:
    bss段：存放没有被初始化或初始化为0的全局变量，只占用程序运行时的内存空间，而不占用程序文件的储存空间；
    data段：初始化过的全局变量数据段，该段用来保存初始化了的非0的全局变量，data段中的变量既占程序运行时的
    内存空间，也占程序文件的储存空间；rodata段：用于存放常量数据；text段：用来存放程序的代码（如函数）和
    部分整数常量（立即数）；stack段：用来保存临时变量和函数参数；heap段：动态内存申请
5.如何跳转到mian函数
    通过ldr跳转到main.（注意：bl跳转和ldr的区别以及地址计算方式。bl的地址与链接地址有关系，与运行位置无关，
    而且只能32MB左右寻址；ldr的地址与运行地址有关系，与运行位置有关）。
6.volatile的作用
    易变性(防止变量在其他地方改变(并行设备的邮件寄存器，中断，多线程)，但在cash中没有改变)：在汇编层面反映出来，
    就是两条语句，下一条语句不会直接使用上一条语句对应的volatile变量的寄存器内容，而是重新从内存中读取。
    不可优化的(防止编译器优化（for循环的例子）)：不要对我这个变量进行各种激进的优化(程序在生产可执行文件的过程中，
    需要有预处理——编译——汇编——链接四个过程，其中编译过程中会有对变量的优化)，甚至将变量直接消除，保证程序员写在代
    码中的指令，一定会被执行。
    顺序性：能够保证Volatile变量间的顺序性，编译器不会进行乱序优化。但是普通变量和Volatile变量是不一定的


实验分析：
